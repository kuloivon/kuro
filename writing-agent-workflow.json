{
  "name": "写作Agent工作流 - 分任务写作处理",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/writing-agent",
        "options": {}
      },
      "id": "w1x2y3z4-a5b6-7890-abcd-ef1234567890",
      "name": "写作任务触发器",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [100, 100],
      "webhookId": "writing-agent"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "llmApiUrl",
            "value": "https://api.openai.com/v1/chat/completions"
          },
          {
            "name": "llmModel",
            "value": "gpt-4"
          },
          {
            "name": "maxConcurrentTasks",
            "value": "3"
          },
          {
            "name": "reviewWorkflowUrl",
            "value": "http://localhost:5678/webhook/quality-review"
          },
          {
            "name": "taskStatusUrl",
            "value": "http://localhost:3000/api/task-status"
          }
        ]
      },
      "id": "x2y3z4a5-b6c7-8901-bcde-f23456789012",
      "name": "环境配置",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [100, 300]
    },
    {
      "parameters": {
        "functionCode": "// 初始化任务队列管理\nfor (const item of $input.all()) {\n  const outlineData = item.json.outlineData;\n  const writingTasks = outlineData.writingTasks || [];\n  \n  // 按优先级和依赖关系排序任务\n  const sortedTasks = writingTasks.sort((a, b) => {\n    // 优先级排序：high > medium > low\n    const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };\n    const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\n    if (priorityDiff !== 0) return priorityDiff;\n    \n    // 章节顺序排序\n    return a.chapter - b.chapter;\n  });\n  \n  // 分批处理任务（避免同时启动过多任务）\n  const maxConcurrent = parseInt($('环境配置').item.json.maxConcurrentTasks);\n  const taskBatches = [];\n  \n  for (let i = 0; i < sortedTasks.length; i += maxConcurrent) {\n    const batch = sortedTasks.slice(i, i + maxConcurrent);\n    taskBatches.push({\n      batchId: Math.floor(i / maxConcurrent) + 1,\n      tasks: batch,\n      status: 'pending'\n    });\n  }\n  \n  item.json = {\n    outlineData: outlineData,\n    taskManagement: {\n      totalTasks: writingTasks.length,\n      totalBatches: taskBatches.length,\n      currentBatch: 1,\n      completedTasks: 0,\n      failedTasks: 0\n    },\n    taskBatches: taskBatches,\n    processingStage: 'task_initialization',\n    startedAt: new Date().toISOString()\n  };\n}\n\nreturn $input.all();"
      },
      "id": "y3z4a5b6-c7d8-9012-cdef-345678901234",
      "name": "任务队列初始化",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 100]
    },
    {
      "parameters": {
        "functionCode": "// 获取当前批次的任务\nconst allData = $input.all();\nconst result = [];\n\nfor (const item of allData) {\n  const taskBatches = item.json.taskBatches;\n  const currentBatchIndex = item.json.taskManagement.currentBatch - 1;\n  \n  if (currentBatchIndex < taskBatches.length) {\n    const currentBatch = taskBatches[currentBatchIndex];\n    \n    // 为当前批次的每个任务创建独立的数据项\n    currentBatch.tasks.forEach((task, taskIndex) => {\n      result.push({\n        json: {\n          originalData: item.json,\n          currentTask: task,\n          batchInfo: {\n            batchId: currentBatch.batchId,\n            taskIndex: taskIndex,\n            totalInBatch: currentBatch.tasks.length\n          },\n          outlineData: item.json.outlineData\n        }\n      });\n    });\n  }\n}\n\nreturn result;"
      },
      "id": "z4a5b6c7-d8e9-0123-def0-456789012345",
      "name": "分发当前批次任务",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 100]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.llmApiUrl }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "{{ $('环境配置').item.json.llmModel }}"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"你是一个专业的学术写作专家。根据提供的论文大纲和具体章节要求，撰写高质量的学术文章内容。\\n\\n写作要求：\\n1. 严格按照提供的内容要求和字数限制\\n2. 保持学术写作的规范性和专业性\\n3. 确保逻辑清晰、论证充分\\n4. 使用恰当的学术语言和表达方式\\n5. 注意与前后章节的逻辑连贯性\\n\\n输出格式：\\n- 直接输出章节内容，无需额外格式\\n- 包含必要的小标题和段落结构\\n- 在需要引用的地方用[引用]标记\\n- 保持指定的字数范围\"}, {\"role\": \"user\", \"content\": \"请根据以下要求撰写论文章节内容：\\n\\n## 论文信息\\n**论文标题：** {{ $json.outlineData.outline.title }}\\n**写作风格：** {{ $json.outlineData.guidelines.style }}\\n**学术水平：** {{ $json.outlineData.guidelines.academicLevel }}\\n\\n## 当前任务\\n**章节：** 第{{ $json.currentTask.chapter }}章\\n**小节：** {{ $json.currentTask.section }} {{ $json.currentTask.title }}\\n**内容要求：** {{ $json.currentTask.requirements.content }}\\n**目标字数：** {{ $json.currentTask.requirements.wordCount }}字\\n**本章目标：** {{ $json.currentTask.requirements.objective }}\\n\\n## 上下文信息\\n**本章要点：**\\n{{ $json.currentTask.requirements.context ? $json.currentTask.requirements.context.map((point, index) => `${index + 1}. ${point}`).join('\\n') : '无特定要点' }}\\n\\n请撰写符合要求的章节内容。\"}]"
            },
            {
              "name": "temperature",
              "value": "0.4"
            },
            {
              "name": "max_tokens",
              "value": "2500"
            }
          ]
        }
      },
      "id": "a5b6c7d8-e9f0-1234-ef01-567890123456",
      "name": "LLM章节写作",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [700, 100]
    },
    {
      "parameters": {
        "functionCode": "// 处理写作结果并进行基础质量检查\nfor (const item of $input.all()) {\n  try {\n    const writtenContent = item.json.choices[0].message.content;\n    const taskInfo = $('分发当前批次任务').first().json;\n    const currentTask = taskInfo.currentTask;\n    \n    // 基础质量检查\n    const wordCount = writtenContent.split(/\\s+/).length;\n    const targetWordCount = currentTask.requirements.wordCount;\n    const wordCountRatio = wordCount / targetWordCount;\n    \n    const qualityChecks = {\n      wordCountAppropriate: wordCountRatio >= 0.8 && wordCountRatio <= 1.2,\n      hasStructure: writtenContent.includes('\\n\\n'), // 检查是否有段落结构\n      hasSubheadings: /^#{1,6}\\s/.test(writtenContent) || /\\*\\*.*\\*\\*/.test(writtenContent),\n      hasReferences: writtenContent.includes('[引用]') || writtenContent.includes('\\['),\n      notEmpty: writtenContent.trim().length > 100,\n      properLength: writtenContent.length > 200\n    };\n    \n    const qualityScore = Object.values(qualityChecks).filter(Boolean).length / Object.values(qualityChecks).length;\n    \n    // 生成写作结果\n    const writingResult = {\n      taskId: currentTask.taskId,\n      chapter: currentTask.chapter,\n      section: currentTask.section,\n      title: currentTask.title,\n      content: writtenContent,\n      metadata: {\n        actualWordCount: wordCount,\n        targetWordCount: targetWordCount,\n        wordCountRatio: wordCountRatio,\n        writtenAt: new Date().toISOString(),\n        qualityScore: qualityScore\n      },\n      qualityCheck: {\n        score: qualityScore,\n        details: qualityChecks,\n        status: qualityScore >= 0.8 ? 'good' : qualityScore >= 0.6 ? 'acceptable' : 'needs_review'\n      },\n      processingStage: 'content_written',\n      nextStage: 'quality_review'\n    };\n    \n    item.json = {\n      originalTaskData: taskInfo,\n      writingResult: writingResult,\n      batchInfo: taskInfo.batchInfo\n    };\n    \n  } catch (error) {\n    item.json = {\n      error: '写作结果处理失败',\n      errorMessage: error.message,\n      taskId: $('分发当前批次任务').first().json.currentTask.taskId,\n      processingStage: 'writing_failed'\n    };\n  }\n}\n\nreturn $input.all();"
      },
      "id": "b6c7d8e9-f0g1-2345-f012-678901234567",
      "name": "写作结果处理",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 100]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.writingResult && $json.writingResult.qualityCheck.status === 'needs_review' }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "c7d8e9f0-g1h2-3456-0123-789012345678",
      "name": "质量预检查",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1100, 100]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.taskStatusUrl }}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $json.writingResult.taskId }}"
            },
            {
              "name": "status",
              "value": "completed"
            },
            {
              "name": "result",
              "value": "={{ $json.writingResult }}"
            }
          ]
        }
      },
      "id": "d8e9f0g1-h2i3-4567-1234-890123456789",
      "name": "更新任务状态",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1300, 80]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.reviewWorkflowUrl }}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "writingResult",
              "value": "={{ $json.writingResult }}"
            },
            {
              "name": "reviewType",
              "value": "quality_review"
            }
          ]
        }
      },
      "id": "e9f0g1h2-i3j4-5678-2345-901234567890",
      "name": "发送质量审核",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1100, 300]
    },
    {
      "parameters": {},
      "id": "f0g1h2i3-j4k5-6789-3456-012345678901",
      "name": "收集批次结果",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1500, 140]
    },
    {
      "parameters": {
        "functionCode": "// 检查当前批次是否完成，决定是否继续下一批次\nconst allResults = $input.all();\nconst firstResult = allResults[0];\n\nif (!firstResult || !firstResult.json.originalTaskData) {\n  return allResults;\n}\n\nconst originalData = firstResult.json.originalTaskData.originalData;\nconst currentBatch = originalData.taskManagement.currentBatch;\nconst totalBatches = originalData.taskManagement.totalBatches;\n\n// 统计当前批次结果\nconst completedInBatch = allResults.filter(item => \n  item.json.writingResult && item.json.writingResult.processingStage === 'content_written'\n).length;\n\nconst failedInBatch = allResults.filter(item => \n  item.json.error || (item.json.writingResult && item.json.writingResult.qualityCheck.status === 'needs_review')\n).length;\n\n// 更新任务管理状态\nconst updatedTaskManagement = {\n  ...originalData.taskManagement,\n  completedTasks: originalData.taskManagement.completedTasks + completedInBatch,\n  failedTasks: originalData.taskManagement.failedTasks + failedInBatch,\n  currentBatch: currentBatch + 1\n};\n\n// 收集已完成的内容\nconst completedContents = allResults.filter(item => item.json.writingResult).map(item => item.json.writingResult);\n\nconst batchSummary = {\n  originalData: {\n    ...originalData,\n    taskManagement: updatedTaskManagement\n  },\n  batchResults: {\n    batchId: currentBatch,\n    completedCount: completedInBatch,\n    failedCount: failedInBatch,\n    totalInBatch: allResults.length,\n    completedContents: completedContents\n  },\n  overallProgress: {\n    totalTasks: originalData.taskManagement.totalTasks,\n    completedTasks: updatedTaskManagement.completedTasks,\n    failedTasks: updatedTaskManagement.failedTasks,\n    remainingBatches: totalBatches - currentBatch,\n    progressPercentage: (updatedTaskManagement.completedTasks / originalData.taskManagement.totalTasks * 100).toFixed(1)\n  },\n  hasMoreBatches: currentBatch < totalBatches,\n  processingStage: currentBatch < totalBatches ? 'continue_next_batch' : 'all_batches_completed'\n};\n\nreturn [{ json: batchSummary }];"
      },
      "id": "g1h2i3j4-k5l6-7890-4567-123456789012",
      "name": "批次进度检查",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 140]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.hasMoreBatches }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "h2i3j4k5-l6m7-8901-5678-234567890123",
      "name": "检查是否有更多批次",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1900, 140]
    },
    {
      "parameters": {
        "amount": 5,
        "unit": "seconds"
      },
      "id": "i3j4k5l6-m7n8-9012-6789-345678901234",
      "name": "批次间隔等待",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [2100, 100]
    },
    {
      "parameters": {
        "functionCode": "// 准备下一批次数据\nfor (const item of $input.all()) {\n  // 重新构造数据以触发下一批次\n  const originalData = item.json.originalData;\n  \n  item.json = originalData; // 返回原始数据格式以便循环处理\n}\n\nreturn $input.all();"
      },
      "id": "j4k5l6m7-n8o9-0123-7890-456789012345",
      "name": "准备下一批次",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2300, 100]
    },
    {
      "parameters": {
        "functionCode": "// 汇总所有批次的写作结果\nfor (const item of $input.all()) {\n  const completedContents = [];\n  const failedTasks = [];\n  \n  // 这里应该从数据库或临时存储中收集所有已完成的内容\n  // 由于是示例，我们从当前数据中收集\n  if (item.json.batchResults && item.json.batchResults.completedContents) {\n    completedContents.push(...item.json.batchResults.completedContents);\n  }\n  \n  // 按章节和小节排序\n  completedContents.sort((a, b) => {\n    if (a.chapter !== b.chapter) return a.chapter - b.chapter;\n    return a.section.localeCompare(b.section);\n  });\n  \n  const writingSummary = {\n    totalTasks: item.json.overallProgress.totalTasks,\n    completedTasks: item.json.overallProgress.completedTasks,\n    failedTasks: item.json.overallProgress.failedTasks,\n    successRate: (item.json.overallProgress.completedTasks / item.json.overallProgress.totalTasks * 100).toFixed(1),\n    completedContents: completedContents,\n    processingStage: 'writing_completed',\n    nextStage: 'final_assembly',\n    completedAt: new Date().toISOString()\n  };\n  \n  item.json = writingSummary;\n}\n\nreturn $input.all();"
      },
      "id": "k5l6m7n8-o9p0-1234-8901-567890123456",
      "name": "汇总写作结果",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 300]
    },
    {
      "parameters": {
        "message": "✅ 所有写作任务完成\\n\\n**总任务数：** {{ $json.totalTasks }}\\n**完成任务：** {{ $json.completedTasks }}\\n**失败任务：** {{ $json.failedTasks }}\\n**成功率：** {{ $json.successRate }}%\\n\\n下一步：论文最终整合",
        "additionalFields": {
          "title": "写作任务完成"
        }
      },
      "id": "l6m7n8o9-p0q1-2345-9012-678901234567",
      "name": "写作完成通知",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2100, 300]
    },
    {
      "parameters": {
        "message": "📝 批次 {{ $json.batchResults.batchId }} 写作进度\\n\\n**本批次完成：** {{ $json.batchResults.completedCount }}/{{ $json.batchResults.totalInBatch }}\\n**总体进度：** {{ $json.overallProgress.progressPercentage }}%\\n**剩余批次：** {{ $json.overallProgress.remainingBatches }}\\n\\n继续处理下一批次...",
        "additionalFields": {
          "title": "写作进度更新"
        }
      },
      "id": "m7n8o9p0-q1r2-3456-0123-789012345678",
      "name": "进度通知",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2100, 200]
    }
  ],
  "connections": {
    "写作任务触发器": {
      "main": [
        [
          {
            "node": "任务队列初始化",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "任务队列初始化": {
      "main": [
        [
          {
            "node": "分发当前批次任务",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "分发当前批次任务": {
      "main": [
        [
          {
            "node": "LLM章节写作",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM章节写作": {
      "main": [
        [
          {
            "node": "写作结果处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "写作结果处理": {
      "main": [
        [
          {
            "node": "质量预检查",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "质量预检查": {
      "main": [
        [
          {
            "node": "更新任务状态",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "发送质量审核",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "更新任务状态": {
      "main": [
        [
          {
            "node": "收集批次结果",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "发送质量审核": {
      "main": [
        [
          {
            "node": "收集批次结果",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "收集批次结果": {
      "main": [
        [
          {
            "node": "批次进度检查",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "批次进度检查": {
      "main": [
        [
          {
            "node": "检查是否有更多批次",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查是否有更多批次": {
      "main": [
        [
          {
            "node": "批次间隔等待",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "汇总写作结果",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "批次间隔等待": {
      "main": [
        [
          {
            "node": "进度通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "进度通知": {
      "main": [
        [
          {
            "node": "准备下一批次",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备下一批次": {
      "main": [
        [
          {
            "node": "分发当前批次任务",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "汇总写作结果": {
      "main": [
        [
          {
            "node": "写作完成通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "writing-agent-v1.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "description": "写作Agent工作流：处理论文分任务写作，支持批量并行处理、任务队列管理、质量预检查和进度跟踪。自动按章节顺序和优先级安排写作任务。",
    "category": "ai-integration",
    "tags": ["分任务写作", "并行处理", "任务队列", "进度跟踪", "质量控制"]
  }
}