{
  "name": "AI论文最终整合工作流 - 全文组装与生成 (基于Gemini-DR格式重构)",
  "nodes": [
    {
      "parameters": {
        "content": "### final_assembly_trigger()\n- 接收论文整合请求\n- 支持多种操作类型：add_approved_content, start_assembly, get_status\n- 使用webhook触发器",
        "height": 400,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1580,
        -280
      ],
      "typeVersion": 1,
      "id": "assembly-trigger-note",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/final-assembly",
        "options": {}
      },
      "id": "f1g2h3i4-j5k6-7890-abcd-ef1234567890",
      "name": "最终整合触发器",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [-1580, -60],
      "webhookId": "final-assembly"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "config-1",
              "name": "number_of_assembly_loops",
              "value": 3,
              "type": "number"
            },
            {
              "id": "config-2",
              "name": "min_completion_rate",
              "value": 0.8,
              "type": "number"
            },
            {
              "id": "config-3",
              "name": "current_date",
              "value": "={{$now.format('yyyy-LL-dd')}}",
              "type": "string"
            },
            {
              "id": "config-4",
              "name": "assembly_id",
              "value": "=assembly:final-assembly:{{ $json.sessionId }}:",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1880,
        -60
      ],
      "id": "assembly-configs",
      "name": "Assembly Configs"
    },
    {
      "parameters": {
        "content": "### Assembly Configs\n- `number_of_assembly_loops` (*最大整合轮次*): 3\n- `min_completion_rate` (*最小完成度要求*): 0.8\n\n### variables:\n- `current_date`\n- `assembly_id`\n\n",
        "height": 300,
        "width": 340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1980,
        -280
      ],
      "typeVersion": 1,
      "id": "assembly-configs-note",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1540,
        200
      ],
      "id": "assembly-gemini-model",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "sUx2BOKL53mwfOJl",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"action\": {\n      \"type\": \"string\",\n      \"enum\": [\"add_approved_content\", \"start_assembly\", \"get_status\"],\n      \"description\": \"操作类型\"\n    },\n    \"content\": {\n      \"type\": \"object\",\n      \"description\": \"内容数据\"\n    },\n    \"sessionId\": {\n      \"type\": \"string\",\n      \"description\": \"会话ID\"\n    }\n  },\n  \"required\": [\"action\", \"sessionId\"],\n  \"additionalProperties\": false\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1260,
        180
      ],
      "id": "assembly-input-parser",
      "name": "Assembly Input Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=你是一个专业的论文整合系统。请分析用户请求并确定操作类型。

输入格式要求：
- 操作类型：add_approved_content（添加已批准内容）、start_assembly（开始整合）、get_status（获取状态）
- 内容数据：当操作类型为add_approved_content时，包含章节内容信息
- 会话ID：用于跟踪整合进度

请根据输入确定正确的操作类型和相关信息。

输入内容：{{ $('最终整合触发器').item.json }}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -1480,
        -60
      ],
      "id": "assembly-request-parser",
      "name": "Assembly Request Parser",
      "notesInFlow": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.action }}",
            "operation": "equal",
            "rightValue": "add_approved_content"
          }
        }
      },
      "id": "assembly-action-check",
      "name": "判断操作类型",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-1200, -60]
    },
    {
      "parameters": {
        "content": "## store_approved_content()\n\n存储已批准的章节内容到内容管理系统。\n- 验证内容完整性\n- 更新章节状态\n- 记录质量评分",
        "height": 400,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1000,
        -420
      ],
      "typeVersion": 1,
      "id": "store-content-note",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 存储已批准内容\nfor (const item of $input.all()) {\n  const approvedContent = item.json.content;\n  const sessionId = item.json.sessionId;\n  \n  // 验证内容完整性\n  const validationResult = validateContent(approvedContent);\n  \n  if (!validationResult.isValid) {\n    item.json = {\n      error: '内容验证失败',\n      errorMessage: validationResult.errorMessage,\n      processingStage: 'validation_failed'\n    };\n    continue;\n  }\n  \n  // 构建存储数据\n  const storageData = {\n    sessionId: sessionId,\n    assemblyId: $('Assembly Configs').item.json.assembly_id,\n    content: {\n      chapter: approvedContent.chapter,\n      section: approvedContent.section,\n      title: approvedContent.title,\n      content: approvedContent.content,\n      qualityScore: approvedContent.qualityScore || 0,\n      wordCount: approvedContent.wordCount || 0,\n      revisionCycles: approvedContent.revisionCycles || 0,\n      approvedAt: new Date().toISOString(),\n      finalQualityScore: approvedContent.finalQualityScore || approvedContent.qualityScore || 0\n    },\n    metadata: {\n      storedAt: new Date().toISOString(),\n      version: '1.0'\n    }\n  };\n  \n  item.json = {\n    storageData: storageData,\n    validationResult: validationResult,\n    processingStage: 'content_validated',\n    readyForStorage: true\n  };\n}\n\nfunction validateContent(content) {\n  const requiredFields = ['chapter', 'section', 'title', 'content'];\n  const missingFields = requiredFields.filter(field => !content[field]);\n  \n  if (missingFields.length > 0) {\n    return {\n      isValid: false,\n      errorMessage: `缺少必需字段: ${missingFields.join(', ')}`\n    };\n  }\n  \n  if (!content.content || content.content.trim().length < 100) {\n    return {\n      isValid: false,\n      errorMessage: '内容长度不足，至少需要100字符'\n    };\n  }\n  \n  return {\n    isValid: true,\n    errorMessage: null\n  };\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        -80
      ],
      "id": "store-approved-content",
      "name": "存储已批准内容",
      "notesInFlow": true
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/content-storage",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "store_content"
            },
            {
              "name": "data",
              "value": "={{ $json.storageData }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "content-storage-api",
      "name": "内容存储API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-600, -80]
    },
    {
      "parameters": {
        "content": "## check_completion_status()\n\n检查论文完成状态和内容完整性。\n- 统计已完成的章节\n- 计算完成度百分比\n- 检查章节连续性\n- 评估整体质量",
        "height": 500,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -400,
        -420
      ],
      "typeVersion": 1,
      "id": "completion-status-note",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/content-storage",
        "method": "GET",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "get_all_content"
            },
            {
              "name": "sessionId",
              "value": "={{ $('Assembly Request Parser').item.json.sessionId }}"
            },
            {
              "name": "include_stats",
              "value": "true"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "check-content-completeness",
      "name": "检查内容完整性",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-400, -80]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 评估整合准备度\nfor (const item of $input.all()) {\n  const storageResponse = item.json;\n  const allContents = storageResponse.contents || [];\n  const stats = storageResponse.stats || {};\n  \n  // 按章节和小节排序\n  const sortedContents = allContents.sort((a, b) => {\n    if (a.chapter !== b.chapter) return a.chapter - b.chapter;\n    return a.section.localeCompare(b.section);\n  });\n  \n  // 统计完成情况\n  const expectedChapters = stats.expectedChapters || 6;\n  const completedChapters = new Set(allContents.map(c => c.chapter)).size;\n  const completionRate = completedChapters / expectedChapters;\n  \n  const minCompletionRate = $('Assembly Configs').item.json.min_completion_rate;\n  const readyForAssembly = completionRate >= minCompletionRate;\n  \n  // 检查章节连续性\n  const chapterNumbers = [...new Set(allContents.map(c => c.chapter))].sort((a, b) => a - b);\n  const hasGaps = chapterNumbers.some((num, index) => {\n    return index > 0 && num !== chapterNumbers[index - 1] + 1;\n  });\n  \n  // 分析质量分布\n  const qualityStats = {\n    averageScore: allContents.length > 0 ? \n      allContents.reduce((sum, c) => sum + (c.finalQualityScore || 0), 0) / allContents.length : 0,\n    minScore: allContents.length > 0 ? Math.min(...allContents.map(c => c.finalQualityScore || 0)) : 0,\n    maxScore: allContents.length > 0 ? Math.max(...allContents.map(c => c.finalQualityScore || 0)) : 0,\n    excellentCount: allContents.filter(c => (c.finalQualityScore || 0) >= 9).length,\n    goodCount: allContents.filter(c => (c.finalQualityScore || 0) >= 7).length,\n    needsAttentionCount: allContents.filter(c => (c.finalQualityScore || 0) < 6).length\n  };\n  \n  const assemblyStatus = {\n    readyForAssembly: readyForAssembly && !hasGaps,\n    completionRate: completionRate,\n    completedChapters: completedChapters,\n    expectedChapters: expectedChapters,\n    totalSections: allContents.length,\n    hasGaps: hasGaps,\n    missingChapters: hasGaps ? [] : [],\n    qualityStats: qualityStats,\n    contents: sortedContents,\n    statusMessage: readyForAssembly ? \n      '✅ 内容完整，可以开始整合' : \n      `⏳ 完成度 ${(completionRate * 100).toFixed(1)}%，需要等待更多内容`,\n    nextAction: readyForAssembly ? 'start_assembly' : 'wait_for_content'\n  };\n  \n  item.json = assemblyStatus;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -200,
        -80
      ],
      "id": "evaluate-assembly-readiness",
      "name": "评估整合准备度",
      "notesInFlow": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.readyForAssembly }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "assembly-readiness-check",
      "name": "检查是否准备就绪",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [0, -80]
    },
    {
      "parameters": {
        "content": "## global_consistency_review()\n\n使用Gemini模型进行全局一致性审核。\n- 分析各章节间的逻辑连贯性\n- 检查术语使用的一致性\n- 评估整体结构合理性\n- 识别需要改进的薄弱环节",
        "height": 600,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        200,
        -420
      ],
      "typeVersion": 1,
      "id": "global-review-note",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"globalReview\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"consistencyScore\": {\n          \"type\": \"number\",\n          \"minimum\": 1,\n          \"maximum\": 10,\n          \"description\": \"一致性评分\"\n        },\n        \"structureScore\": {\n          \"type\": \"number\",\n          \"minimum\": 1,\n          \"maximum\": 10,\n          \"description\": \"结构评分\"\n        },\n        \"cohesionScore\": {\n          \"type\": \"number\",\n          \"minimum\": 1,\n          \"maximum\": 10,\n          \"description\": \"连贯性评分\"\n        },\n        \"overallQuality\": {\n          \"type\": \"number\",\n          \"minimum\": 1,\n          \"maximum\": 10,\n          \"description\": \"总体质量评分\"\n        }\n      },\n      \"required\": [\"consistencyScore\", \"structureScore\", \"cohesionScore\", \"overallQuality\"]\n    },\n    \"identifiedIssues\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"问题类型\"\n          },\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"问题位置\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"问题描述\"\n          },\n          \"suggestion\": {\n            \"type\": \"string\",\n            \"description\": \"改进建议\"\n          }\n        },\n        \"required\": [\"type\", \"location\", \"description\", \"suggestion\"]\n      }\n    },\n    \"improvementPlan\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"priority\": {\n            \"type\": \"string\",\n            \"enum\": [\"high\", \"medium\", \"low\"],\n            \"description\": \"优先级\"\n          },\n          \"action\": {\n            \"type\": \"string\",\n            \"description\": \"改进行动\"\n          },\n          \"target\": {\n            \"type\": \"string\",\n            \"description\": \"目标章节或部分\"\n          }\n        },\n        \"required\": [\"priority\", \"action\", \"target\"]\n      }\n    },\n    \"assemblyReady\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否可以开始整合\"\n    },\n    \"recommendedActions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"建议行动列表\"\n    }\n  },\n  \"required\": [\"globalReview\", \"identifiedIssues\", \"improvementPlan\", \"assemblyReady\", \"recommendedActions\"],\n  \"additionalProperties\": false\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        400,
        180
      ],
      "id": "global-review-parser",
      "name": "Global Review Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=你是一个专业的学术论文编辑和整合专家。你的任务是将多个已审核的章节内容整合成一篇完整、连贯的学术论文。

整合要求：
1. **全局一致性**：确保各章节之间逻辑连贯，术语统一
2. **结构完整性**：检查论文整体结构的合理性
3. **过渡优化**：在章节间添加适当的过渡和连接
4. **格式统一**：统一引用格式、图表编号等
5. **语言润色**：保持全文语言风格的一致性
6. **质量提升**：识别并改进薄弱环节

请对以下论文章节进行全局审核和整合准备：

## 论文统计
**完成度：** {{ ($json.completionRate * 100).toFixed(1) }}%
**章节数：** {{ $json.completedChapters }}/{{ $json.expectedChapters }}
**小节数：** {{ $json.totalSections }}
**平均质量：** {{ $json.qualityStats.averageScore.toFixed(1) }}/10

## 各章节内容
{{ $json.contents.map((content, index) => `### 第${content.chapter}章 ${content.section} ${content.title}
**质量评分：** ${content.finalQualityScore}/10
**字数：** ${content.wordCount}
**修订轮次：** ${content.revisionCycles}

${content.content.substring(0, 500)}...

---
`).join('') }}

请进行全局一致性审核并提供整合建议。",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        200,
        -60
      ],
      "id": "llm-global-consistency-review",
      "name": "LLM全局一致性审核",
      "notesInFlow": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 处理全局审核结果并生成整合策略\nfor (const item of $input.all()) {\n  try {\n    const reviewResponse = item.json;\n    const assemblyData = $('评估整合准备度').first().json;\n    \n    // 分析审核结果\n    const globalQuality = {\n      consistency: reviewResponse.globalReview.consistencyScore,\n      structure: reviewResponse.globalReview.structureScore,\n      cohesion: reviewResponse.globalReview.cohesionScore,\n      overall: reviewResponse.globalReview.overallQuality,\n      average: (reviewResponse.globalReview.consistencyScore + \n               reviewResponse.globalReview.structureScore + \n               reviewResponse.globalReview.cohesionScore + \n               reviewResponse.globalReview.overallQuality) / 4\n    };\n    \n    // 分类问题\n    const criticalIssues = reviewResponse.identifiedIssues.filter(issue => \n      issue.type.includes('一致性') || issue.type.includes('逻辑')\n    );\n    \n    const formatIssues = reviewResponse.identifiedIssues.filter(issue => \n      issue.type.includes('格式') || issue.type.includes('引用')\n    );\n    \n    const styleIssues = reviewResponse.identifiedIssues.filter(issue => \n      issue.type.includes('语言') || issue.type.includes('风格')\n    );\n    \n    // 制定整合策略\n    const assemblyStrategy = {\n      approachType: globalQuality.average >= 8 ? 'direct_assembly' : \n                   globalQuality.average >= 6 ? 'moderate_revision' : 'comprehensive_revision',\n      \n      priorityActions: reviewResponse.improvementPlan\n        .filter(plan => plan.priority === 'high')\n        .map(plan => plan.action),\n      \n      processingSteps: [\n        'content_merging',\n        criticalIssues.length > 0 ? 'critical_issue_resolution' : null,\n        'format_standardization', \n        'style_harmonization',\n        'final_review'\n      ].filter(Boolean),\n      \n      estimatedTime: globalQuality.average >= 8 ? '10-15分钟' : \n                    globalQuality.average >= 6 ? '20-30分钟' : '40-60分钟'\n    };\n    \n    const globalReviewResult = {\n      timestamp: new Date().toISOString(),\n      qualityAssessment: globalQuality,\n      issueAnalysis: {\n        totalIssues: reviewResponse.identifiedIssues.length,\n        criticalIssues: criticalIssues.length,\n        formatIssues: formatIssues.length,\n        styleIssues: styleIssues.length,\n        issueDetails: reviewResponse.identifiedIssues\n      },\n      assemblyStrategy: assemblyStrategy,\n      assemblyReady: reviewResponse.assemblyReady && globalQuality.average >= 6,\n      recommendedActions: reviewResponse.recommendedActions,\n      contents: assemblyData.contents,\n      processingStage: 'global_review_completed',\n      nextStage: reviewResponse.assemblyReady ? 'paper_assembly' : 'issue_resolution'\n    };\n    \n    item.json = globalReviewResult;\n    \n  } catch (error) {\n    item.json = {\n      error: '全局审核结果处理失败',\n      errorMessage: error.message,\n      originalResponse: item.json,\n      processingStage: 'global_review_failed'\n    };\n  }\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        -60
      ],
      "id": "global-review-result-processor",
      "name": "全局审核结果处理",
      "notesInFlow": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.assemblyReady }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "assembly-ready-check",
      "name": "检查整合就绪状态",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, -60]
    },
    {
      "parameters": {
        "content": "## paper_assembly()\n\n执行论文整合流程。\n- 合并所有章节内容\n- 添加章节间过渡\n- 统一格式和引用\n- 生成最终论文",
        "height": 400,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1000,
        -420
      ],
      "typeVersion": 1,
      "id": "paper-assembly-note",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"assembledPaper\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"title\": {\n          \"type\": \"string\",\n          \"description\": \"论文标题\"\n        },\n        \"abstract\": {\n          \"type\": \"string\",\n          \"description\": \"摘要\"\n        },\n        \"keywords\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"关键词\"\n        },\n        \"chapters\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"chapterNumber\": {\n                \"type\": \"number\"\n              },\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"content\": {\n                \"type\": \"string\"\n              },\n              \"wordCount\": {\n                \"type\": \"number\"\n              }\n            }\n          }\n        },\n        \"totalWordCount\": {\n          \"type\": \"number\"\n        },\n        \"references\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"required\": [\"title\", \"chapters\", \"totalWordCount\"]\n    },\n    \"assemblyMetadata\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"assemblyTime\": {\n          \"type\": \"string\"\n        },\n        \"qualityScore\": {\n          \"type\": \"number\"\n        },\n        \"revisionNotes\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"required\": [\"assembledPaper\", \"assemblyMetadata\"],\n  \"additionalProperties\": false\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1200,
        180
      ],
      "id": "paper-assembly-parser",
      "name": "Paper Assembly Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=你是一个专业的学术论文整合专家。请将提供的章节内容整合成一篇完整、连贯的学术论文。

整合要求：
1. **内容合并**：将所有章节内容按逻辑顺序合并
2. **过渡优化**：在章节间添加自然的过渡段落
3. **格式统一**：统一引用格式、术语使用
4. **结构优化**：确保整体结构清晰合理
5. **语言润色**：保持全文语言风格一致

请整合以下章节内容：

{{ $json.contents.map((content, index) => `## 第${content.chapter}章 ${content.section} ${content.title}
${content.content}

---
`).join('') }}

请生成完整的整合论文，包括标题、章节内容、参考文献等。",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1000,
        -60
      ],
      "id": "llm-paper-assembly",
      "name": "LLM论文整合",
      "notesInFlow": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 处理论文整合结果\nfor (const item of $input.all()) {\n  try {\n    const assemblyResult = item.json;\n    const reviewData = $('全局审核结果处理').first().json;\n    \n    // 构建最终论文数据\n    const finalPaper = {\n      paperId: $('Assembly Configs').item.json.assembly_id,\n      sessionId: $('Assembly Request Parser').item.json.sessionId,\n      title: assemblyResult.assembledPaper.title,\n      abstract: assemblyResult.assembledPaper.abstract || '',\n      keywords: assemblyResult.assembledPaper.keywords || [],\n      chapters: assemblyResult.assembledPaper.chapters,\n      totalWordCount: assemblyResult.assembledPaper.totalWordCount,\n      references: assemblyResult.assembledPaper.references || [],\n      qualityScore: assemblyResult.assemblyMetadata.qualityScore,\n      assemblyTime: assemblyResult.assemblyMetadata.assemblyTime,\n      revisionNotes: assemblyResult.assemblyMetadata.revisionNotes || [],\n      globalReviewData: reviewData,\n      completedAt: new Date().toISOString(),\n      status: 'completed'\n    };\n    \n    // 生成论文摘要\n    const paperSummary = {\n      totalChapters: finalPaper.chapters.length,\n      averageChapterLength: finalPaper.totalWordCount / finalPaper.chapters.length,\n      qualityAssessment: reviewData.qualityAssessment,\n      assemblyStrategy: reviewData.assemblyStrategy,\n      completionStatus: 'success'\n    };\n    \n    item.json = {\n      finalPaper: finalPaper,\n      paperSummary: paperSummary,\n      processingStage: 'assembly_completed',\n      success: true\n    };\n    \n  } catch (error) {\n    item.json = {\n      error: '论文整合处理失败',\n      errorMessage: error.message,\n      originalResponse: item.json,\n      processingStage: 'assembly_failed'\n    };\n  }\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        -60
      ],
      "id": "paper-assembly-result-processor",
      "name": "论文整合结果处理",
      "notesInFlow": true
    },
    {
      "parameters": {
        "content": "## final_output()\n\n生成最终输出结果。\n- 返回整合完成的论文\n- 提供质量评估报告\n- 包含处理状态信息",
        "height": 300,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1600,
        -420
      ],
      "typeVersion": 1,
      "id": "final-output-note",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 生成最终输出\nfor (const item of $input.all()) {\n  const result = {\n    success: true,\n    message: '论文整合完成',\n    data: {\n      paper: item.json.finalPaper,\n      summary: item.json.paperSummary\n    },\n    timestamp: new Date().toISOString(),\n    processingTime: new Date() - new Date($('Assembly Request Parser').item.json.timestamp || Date.now())\n  };\n  \n  item.json = result;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        -60
      ],
      "id": "final-output-generator",
      "name": "最终输出生成器",
      "notesInFlow": true
    }
  ],
  "connections": {
    "最终整合触发器": {
      "main": [
        [
          {
            "node": "Assembly Request Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assembly Configs": {
      "main": [
        []
      ]
    },
    "Assembly Request Parser": {
      "main": [
        [
          {
            "node": "判断操作类型",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "判断操作类型": {
      "main": [
        [
          {
            "node": "存储已批准内容",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "检查内容完整性",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "存储已批准内容": {
      "main": [
        [
          {
            "node": "内容存储API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "内容存储API": {
      "main": [
        [
          {
            "node": "检查内容完整性",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查内容完整性": {
      "main": [
        [
          {
            "node": "评估整合准备度",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "评估整合准备度": {
      "main": [
        [
          {
            "node": "检查是否准备就绪",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查是否准备就绪": {
      "main": [
        [
          {
            "node": "LLM全局一致性审核",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "最终输出生成器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM全局一致性审核": {
      "main": [
        [
          {
            "node": "全局审核结果处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "全局审核结果处理": {
      "main": [
        [
          {
            "node": "检查整合就绪状态",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查整合就绪状态": {
      "main": [
        [
          {
            "node": "LLM论文整合",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "最终输出生成器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM论文整合": {
      "main": [
        [
          {
            "node": "论文整合结果处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "论文整合结果处理": {
      "main": [
        [
          {
            "node": "最终输出生成器",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "assembly-workflow",
      "name": "论文整合"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1.0.0"
}