{
  "name": "论文最终整合工作流 - 全文组装与生成",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/final-assembly",
        "options": {}
      },
      "id": "f1g2h3i4-j5k6-7890-abcd-ef1234567890",
      "name": "最终整合触发器",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [100, 100],
      "webhookId": "final-assembly"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "llmApiUrl",
              "value": "https://api.openai.com/v1/chat/completions"
            },
            {
              "name": "llmModel",
              "value": "gpt-4"
            },
            {
              "name": "assemblyModel",
              "value": "gpt-4-turbo"
            },
            {
              "name": "storageApiUrl",
              "value": "http://localhost:3000/api/content-storage"
            },
            {
              "name": "outputFormatUrl",
              "value": "http://localhost:3000/api/format-output"
            },
            {
              "name": "minCompletionRate",
              "value": "0.8"
            }
          ]
        }
      },
      "id": "g2h3i4j5-k6l7-8901-bcde-f23456789012",
      "name": "环境配置",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [100, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.action }}",
            "operation": "equal",
            "rightValue": "add_approved_content"
          }
        }
      },
      "id": "h3i4j5k6-l7m8-9012-cdef-345678901234",
      "name": "判断操作类型",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [300, 100]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.storageApiUrl }}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "store_content"
            },
            {
              "name": "content",
              "value": "={{ $json.approvedContent }}"
            }
          ]
        }
      },
      "id": "i4j5k6l7-m8n9-0123-def0-456789012345",
      "name": "存储已批准内容",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 80]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.storageApiUrl }}",
        "method": "GET",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "get_all_content"
            },
            {
              "name": "include_stats",
              "value": "true"
            }
          ]
        }
      },
      "id": "j5k6l7m8-n9o0-1234-ef01-567890123456",
      "name": "检查内容完整性",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [700, 80]
    },
    {
      "parameters": {
        "functionCode": "// 检查论文完整性并决定是否可以开始整合\nfor (const item of $input.all()) {\n  const storageResponse = item.json;\n  const allContents = storageResponse.contents || [];\n  const stats = storageResponse.stats || {};\n  \n  // 按章节和小节排序\n  const sortedContents = allContents.sort((a, b) => {\n    if (a.chapter !== b.chapter) return a.chapter - b.chapter;\n    return a.section.localeCompare(b.section);\n  });\n  \n  // 统计完成情况\n  const expectedChapters = stats.expectedChapters || 6; // 默认6章\n  const completedChapters = new Set(allContents.map(c => c.chapter)).size;\n  const completionRate = completedChapters / expectedChapters;\n  \n  const minCompletionRate = parseFloat($('环境配置').item.json.minCompletionRate);\n  const readyForAssembly = completionRate >= minCompletionRate;\n  \n  // 检查章节连续性\n  const chapterNumbers = [...new Set(allContents.map(c => c.chapter))].sort((a, b) => a - b);\n  const hasGaps = chapterNumbers.some((num, index) => {\n    return index > 0 && num !== chapterNumbers[index - 1] + 1;\n  });\n  \n  // 分析质量分布\n  const qualityStats = {\n    averageScore: allContents.reduce((sum, c) => sum + c.finalQualityScore, 0) / allContents.length,\n    minScore: Math.min(...allContents.map(c => c.finalQualityScore)),\n    maxScore: Math.max(...allContents.map(c => c.finalQualityScore)),\n    excellentCount: allContents.filter(c => c.finalQualityScore >= 9).length,\n    goodCount: allContents.filter(c => c.finalQualityScore >= 7).length,\n    needsAttentionCount: allContents.filter(c => c.finalQualityScore < 6).length\n  };\n  \n  const assemblyStatus = {\n    readyForAssembly: readyForAssembly && !hasGaps,\n    completionRate: completionRate,\n    completedChapters: completedChapters,\n    expectedChapters: expectedChapters,\n    totalSections: allContents.length,\n    hasGaps: hasGaps,\n    missingChapters: hasGaps ? [] : [], // 这里可以详细计算缺失章节\n    qualityStats: qualityStats,\n    contents: sortedContents,\n    statusMessage: readyForAssembly ? \n      '✅ 内容完整，可以开始整合' : \n      `⏳ 完成度 ${(completionRate * 100).toFixed(1)}%，需要等待更多内容`,\n    nextAction: readyForAssembly ? 'start_assembly' : 'wait_for_content'\n  };\n  \n  item.json = assemblyStatus;\n}\n\nreturn $input.all();"
      },
      "id": "k6l7m8n9-o0p1-2345-f012-678901234567",
      "name": "评估整合准备度",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 80]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.readyForAssembly }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "l7m8n9o0-p1q2-3456-0123-789012345678",
      "name": "检查是否准备就绪",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1100, 80]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.llmApiUrl }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "{{ $('环境配置').item.json.assemblyModel }}"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"你是一个专业的学术论文编辑和整合专家。你的任务是将多个已审核的章节内容整合成一篇完整、连贯的学术论文。\\n\\n整合要求：\\n1. **全局一致性**：确保各章节之间逻辑连贯，术语统一\\n2. **结构完整性**：检查论文整体结构的合理性\\n3. **过渡优化**：在章节间添加适当的过渡和连接\\n4. **格式统一**：统一引用格式、图表编号等\\n5. **语言润色**：保持全文语言风格的一致性\\n6. **质量提升**：识别并改进薄弱环节\\n\\n输出格式为JSON：\\n{\\n  \\\"globalReview\\\": {\\n    \\\"consistencyScore\\\": 评分(1-10),\\n    \\\"structureScore\\\": 结构评分(1-10),\\n    \\\"cohesionScore\\\": 连贯性评分(1-10),\\n    \\\"overallQuality\\\": 总体质量评分(1-10)\\n  },\\n  \\\"identifiedIssues\\\": [\\n    {\\n      \\\"type\\\": \\\"问题类型\\\",\\n      \\\"location\\\": \\\"位置\\\",\\n      \\\"description\\\": \\\"问题描述\\\",\\n      \\\"suggestion\\\": \\\"改进建议\\\"\\n    }\\n  ],\\n  \\\"improvementPlan\\\": [\\n    {\\n      \\\"priority\\\": \\\"优先级(high/medium/low)\\\",\\n      \\\"action\\\": \\\"改进行动\\\",\\n      \\\"target\\\": \\\"目标章节或部分\\\"\\n    }\\n  ],\\n  \\\"assemblyReady\\\": true/false,\\n  \\\"recommendedActions\\\": [\\\"建议行动1\\\", \\\"建议行动2\\\"]\\n}\"}, {\"role\": \"user\", \"content\": \"请对以下论文章节进行全局审核和整合准备：\\n\\n## 论文统计\\n**完成度：** {{ ($json.completionRate * 100).toFixed(1) }}%\\n**章节数：** {{ $json.completedChapters }}/{{ $json.expectedChapters }}\\n**小节数：** {{ $json.totalSections }}\\n**平均质量：** {{ $json.qualityStats.averageScore.toFixed(1) }}/10\\n\\n## 各章节内容\\n{{ $json.contents.map((content, index) => `### 第${content.chapter}章 ${content.section} ${content.title}\\n**质量评分：** ${content.finalQualityScore}/10\\n**字数：** ${content.wordCount}\\n**修订轮次：** ${content.revisionCycles}\\n\\n${content.content.substring(0, 500)}...\\n\\n---\\n`).join('') }}\\n\\n请进行全局一致性审核并提供整合建议。\"}]"
            },
            {
              "name": "temperature",
              "value": "0.3"
            },
            {
              "name": "max_tokens",
              "value": "2500"
            }
          ]
        }
      },
      "id": "m8n9o0p1-q2r3-4567-1234-890123456789",
      "name": "LLM全局一致性审核",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1300, 60]
    },
    {
      "parameters": {
        "functionCode": "// 处理全局审核结果并生成整合策略\nfor (const item of $input.all()) {\n  try {\n    const reviewResponse = JSON.parse(item.json.choices[0].message.content);\n    const assemblyData = $('评估整合准备度').first().json;\n    \n    // 分析审核结果\n    const globalQuality = {\n      consistency: reviewResponse.globalReview.consistencyScore,\n      structure: reviewResponse.globalReview.structureScore,\n      cohesion: reviewResponse.globalReview.cohesionScore,\n      overall: reviewResponse.globalReview.overallQuality,\n      average: (reviewResponse.globalReview.consistencyScore + \n               reviewResponse.globalReview.structureScore + \n               reviewResponse.globalReview.cohesionScore + \n               reviewResponse.globalReview.overallQuality) / 4\n    };\n    \n    // 分类问题\n    const criticalIssues = reviewResponse.identifiedIssues.filter(issue => \n      issue.type.includes('一致性') || issue.type.includes('逻辑')\n    );\n    \n    const formatIssues = reviewResponse.identifiedIssues.filter(issue => \n      issue.type.includes('格式') || issue.type.includes('引用')\n    );\n    \n    const styleIssues = reviewResponse.identifiedIssues.filter(issue => \n      issue.type.includes('语言') || issue.type.includes('风格')\n    );\n    \n    // 制定整合策略\n    const assemblyStrategy = {\n      approachType: globalQuality.average >= 8 ? 'direct_assembly' : \n                   globalQuality.average >= 6 ? 'moderate_revision' : 'comprehensive_revision',\n      \n      priorityActions: reviewResponse.improvementPlan\n        .filter(plan => plan.priority === 'high')\n        .map(plan => plan.action),\n      \n      processingSteps: [\n        'content_merging',\n        criticalIssues.length > 0 ? 'critical_issue_resolution' : null,\n        'format_standardization', \n        'style_harmonization',\n        'final_review'\n      ].filter(Boolean),\n      \n      estimatedTime: globalQuality.average >= 8 ? '10-15分钟' : \n                    globalQuality.average >= 6 ? '20-30分钟' : '40-60分钟'\n    };\n    \n    const globalReviewResult = {\n      timestamp: new Date().toISOString(),\n      qualityAssessment: globalQuality,\n      issueAnalysis: {\n        totalIssues: reviewResponse.identifiedIssues.length,\n        criticalIssues: criticalIssues.length,\n        formatIssues: formatIssues.length,\n        styleIssues: styleIssues.length,\n        issueDetails: reviewResponse.identifiedIssues\n      },\n      assemblyStrategy: assemblyStrategy,\n      assemblyReady: reviewResponse.assemblyReady && globalQuality.average >= 6,\n      recommendedActions: reviewResponse.recommendedActions,\n      contents: assemblyData.contents,\n      processingStage: 'global_review_completed',\n      nextStage: reviewResponse.assemblyReady ? 'paper_assembly' : 'issue_resolution'\n    };\n    \n    item.json = globalReviewResult;\n    \n  } catch (error) {\n    item.json = {\n      error: '全局审核结果处理失败',\n      errorMessage: error.message,\n      originalResponse: item.json,\n      processingStage: 'global_review_failed'\n    };\n  }\n}\n\nreturn $input.all();"
      },
      "id": "n9o0p1q2-r3s4-5678-2345-901234567890",
      "name": "全局审核结果处理",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1500, 60]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.assemblyReady }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "o0p1q2r3-s4t5-6789-3456-012345678901",
      "name": "检查是否可以整合",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1700, 60]
    },
    {
      "parameters": {
        "functionCode": "// 开始论文整合过程\nfor (const item of $input.all()) {\n  const reviewResult = item.json;\n  const contents = reviewResult.contents;\n  \n  // 构建完整论文结构\n  let fullPaper = '';\n  \n  // 1. 标题和摘要（如果有大纲信息）\n  fullPaper += `# 论文标题\\n\\n`;\n  fullPaper += `## 摘要\\n\\n[此处需要根据大纲信息生成摘要]\\n\\n`;\n  fullPaper += `## 关键词\\n\\n[关键词列表]\\n\\n`;\n  \n  // 2. 目录\n  fullPaper += `## 目录\\n\\n`;\n  const chapters = [...new Set(contents.map(c => c.chapter))].sort((a, b) => a - b);\n  chapters.forEach(chapterNum => {\n    const chapterContents = contents.filter(c => c.chapter === chapterNum);\n    if (chapterContents.length > 0) {\n      fullPaper += `${chapterNum}. 第${chapterNum}章\\n`;\n      chapterContents.forEach(content => {\n        fullPaper += `  ${content.section} ${content.title}\\n`;\n      });\n    }\n  });\n  fullPaper += `\\n\\n`;\n  \n  // 3. 正文内容\n  let currentChapter = 0;\n  contents.forEach(content => {\n    if (content.chapter !== currentChapter) {\n      currentChapter = content.chapter;\n      fullPaper += `\\n\\n# 第${currentChapter}章\\n\\n`;\n    }\n    \n    fullPaper += `## ${content.section} ${content.title}\\n\\n`;\n    fullPaper += content.content;\n    fullPaper += `\\n\\n`;\n  });\n  \n  // 4. 参考文献\n  fullPaper += `\\n\\n# 参考文献\\n\\n`;\n  fullPaper += `[此处将汇总所有章节的参考文献]\\n\\n`;\n  \n  // 5. 附录（如需要）\n  fullPaper += `\\n\\n# 附录\\n\\n`;\n  fullPaper += `[相关附录内容]\\n\\n`;\n  \n  // 统计信息\n  const totalWords = contents.reduce((sum, c) => sum + c.wordCount, 0);\n  const averageQuality = contents.reduce((sum, c) => sum + c.finalQualityScore, 0) / contents.length;\n  \n  const assembledPaper = {\n    title: '自动生成的学术论文',\n    content: fullPaper,\n    metadata: {\n      totalWords: totalWords,\n      totalChapters: chapters.length,\n      totalSections: contents.length,\n      averageQuality: averageQuality,\n      completionDate: new Date().toISOString(),\n      assemblyStrategy: reviewResult.assemblyStrategy.approachType\n    },\n    qualityMetrics: {\n      globalConsistency: reviewResult.qualityAssessment.consistency,\n      structuralIntegrity: reviewResult.qualityAssessment.structure,\n      contentCohesion: reviewResult.qualityAssessment.cohesion,\n      overallQuality: reviewResult.qualityAssessment.overall\n    },\n    processingLog: {\n      assembledAt: new Date().toISOString(),\n      processingSteps: reviewResult.assemblyStrategy.processingSteps,\n      resolvedIssues: reviewResult.issueAnalysis.totalIssues,\n      finalStatus: 'assembly_completed'\n    },\n    processingStage: 'paper_assembled',\n    nextStage: 'format_output'\n  };\n  \n  item.json = assembledPaper;\n}\n\nreturn $input.all();"
      },
      "id": "p1q2r3s4-t5u6-7890-4567-123456789012",
      "name": "执行论文整合",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 40]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.outputFormatUrl }}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.content }}"
            },
            {
              "name": "metadata",
              "value": "={{ $json.metadata }}"
            },
            {
              "name": "formats",
              "value": "['markdown', 'pdf', 'docx']"
            }
          ]
        }
      },
      "id": "q2r3s4t5-u6v7-8901-5678-234567890123",
      "name": "生成多格式输出",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2100, 40]
    },
    {
      "parameters": {
        "message": "⏳ 等待更多内容完成\\n\\n**当前进度：** {{ ($json.completionRate * 100).toFixed(1) }}%\\n**已完成章节：** {{ $json.completedChapters }}/{{ $json.expectedChapters }}\\n**已完成小节：** {{ $json.totalSections }}个\\n**平均质量：** {{ $json.qualityStats.averageScore.toFixed(1) }}/10\\n\\n{{ $json.statusMessage }}",
        "additionalFields": {
          "title": "论文整合状态"
        }
      },
      "id": "r3s4t5u6-v7w8-9012-6789-345678901234",
      "name": "等待状态通知",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [1100, 200]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.storageApiUrl }}",
        "method": "GET",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "get_completion_status"
            }
          ]
        }
      },
      "id": "s4t5u6v7-w8x9-0123-7890-456789012345",
      "name": "获取完成状态",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 200]
    },
    {
      "parameters": {
        "message": "⚠️ 全局质量检查未通过\\n\\n**总体评分：** {{ $json.qualityAssessment.overall }}/10\\n**发现问题：** {{ $json.issueAnalysis.totalIssues }}个\\n**关键问题：** {{ $json.issueAnalysis.criticalIssues }}个\\n\\n**建议行动：**\\n{{ $json.recommendedActions.map((action, index) => `${index + 1}. ${action}`).join('\\n') }}\\n\\n需要解决问题后重新整合。",
        "additionalFields": {
          "title": "整合质量检查失败",
          "color": "#FF9500"
        }
      },
      "id": "t5u6v7w8-x9y0-1234-8901-567890123456",
      "name": "质量问题通知",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [1700, 200]
    },
    {
      "parameters": {
        "message": "🎉 论文整合完成！\\n\\n**📊 论文统计**\\n- **总字数：** {{ $json.metadata.totalWords }} 字\\n- **章节数：** {{ $json.metadata.totalChapters }} 章\\n- **小节数：** {{ $json.metadata.totalSections }} 个\\n- **平均质量：** {{ $json.metadata.averageQuality.toFixed(1) }}/10\\n\\n**🎯 质量指标**\\n- **全局一致性：** {{ $json.qualityMetrics.globalConsistency }}/10\\n- **结构完整性：** {{ $json.qualityMetrics.structuralIntegrity }}/10\\n- **内容连贯性：** {{ $json.qualityMetrics.contentCohesion }}/10\\n- **总体质量：** {{ $json.qualityMetrics.overallQuality }}/10\\n\\n**✅ 已生成格式：** Markdown, PDF, DOCX\\n**📅 完成时间：** {{ $json.metadata.completionDate }}",
        "additionalFields": {
          "title": "🎓 论文自动生成完成",
          "color": "#00C851"
        }
      },
      "id": "u6v7w8x9-y0z1-2345-9012-678901234567",
      "name": "完成通知",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2300, 40]
    }
  ],
  "connections": {
    "最终整合触发器": {
      "main": [
        [
          {
            "node": "判断操作类型",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "判断操作类型": {
      "main": [
        [
          {
            "node": "存储已批准内容",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "获取完成状态",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "存储已批准内容": {
      "main": [
        [
          {
            "node": "检查内容完整性",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查内容完整性": {
      "main": [
        [
          {
            "node": "评估整合准备度",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "评估整合准备度": {
      "main": [
        [
          {
            "node": "检查是否准备就绪",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查是否准备就绪": {
      "main": [
        [
          {
            "node": "LLM全局一致性审核",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "等待状态通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM全局一致性审核": {
      "main": [
        [
          {
            "node": "全局审核结果处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "全局审核结果处理": {
      "main": [
        [
          {
            "node": "检查是否可以整合",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查是否可以整合": {
      "main": [
        [
          {
            "node": "执行论文整合",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "质量问题通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "执行论文整合": {
      "main": [
        [
          {
            "node": "生成多格式输出",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "生成多格式输出": {
      "main": [
        [
          {
            "node": "完成通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取完成状态": {
      "main": [
        [
          {
            "node": "评估整合准备度",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "final-assembly-v1.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "description": "论文最终整合工作流：收集已批准的章节内容，进行全局一致性检查，整合成完整论文并生成多种格式输出。支持质量控制和进度监控。",
    "category": "document-processing",
    "tags": ["论文整合", "全局审核", "一致性检查", "多格式输出", "质量控制"]
  }
}