{
  "name": "论文大纲生成工作流",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/outline-generation",
        "options": {}
      },
      "id": "o1p2q3r4-s5t6-7890-abcd-ef1234567890",
      "name": "大纲生成触发器",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [100, 100],
      "webhookId": "outline-generation"
    },
    {
      "parameters": {
        "values": [
          {
            "name": "llmApiUrl",
            "value": "https://api.openai.com/v1/chat/completions"
          },
          {
            "name": "llmModel",
            "value": "gpt-4"
          },
          {
            "name": "embeddingApiUrl",
            "value": "https://api.openai.com/v1/embeddings"
          },
          {
            "name": "knowledgeBaseUrl",
            "value": "http://localhost:3000/api/knowledge-search"
          },
          {
            "name": "writingWorkflowUrl",
            "value": "http://localhost:5678/webhook/writing-agent"
          }
        ]
      },
      "id": "p2q3r4s5-t6u7-8901-bcde-f23456789012",
      "name": "环境配置",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [100, 300]
    },
    {
      "parameters": {
        "functionCode": "// 解析输入数据并提取关键信息用于知识库检索\nfor (const item of $input.all()) {\n  const documentAnalysis = item.json.documentAnalysis;\n  \n  // 构建搜索查询\n  const searchQueries = [];\n  \n  // 主题相关查询\n  if (documentAnalysis.theme) {\n    searchQueries.push({\n      type: 'theme',\n      query: documentAnalysis.theme,\n      priority: 'high'\n    });\n  }\n  \n  // 关键概念查询\n  documentAnalysis.concepts.forEach(concept => {\n    searchQueries.push({\n      type: 'concept',\n      query: concept + ' 论文结构',\n      priority: 'medium'\n    });\n  });\n  \n  // 学科领域查询\n  const disciplineKeywords = [\n    '论文写作方法', '学术写作规范', '论文大纲模板',\n    documentAnalysis.theme + ' 研究方法'\n  ];\n  \n  disciplineKeywords.forEach(keyword => {\n    searchQueries.push({\n      type: 'methodology',\n      query: keyword,\n      priority: 'medium'\n    });\n  });\n  \n  // 添加通用论文结构查询\n  searchQueries.push({\n    type: 'structure',\n    query: '学术论文标准结构 章节安排',\n    priority: 'high'\n  });\n  \n  item.json.searchQueries = searchQueries;\n  item.json.originalAnalysis = documentAnalysis;\n  \n}\n\nreturn $input.all();"
      },
      "id": "q3r4s5t6-u7v8-9012-cdef-345678901234",
      "name": "构建知识库搜索查询",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 100]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.knowledgeBaseUrl }}",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "queries",
              "value": "={{ $json.searchQueries }}"
            },
            {
              "name": "limit",
              "value": "10"
            },
            {
              "name": "includeScore",
              "value": "true"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "r4s5t6u7-v8w9-0123-def0-456789012345",
      "name": "知识库检索",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 100]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.results && $json.results.length > 0 }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "s5t6u7v8-w9x0-1234-ef01-567890123456",
      "name": "检查知识库结果",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [700, 100]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.llmApiUrl }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "{{ $('环境配置').item.json.llmModel }}"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"你是一个专业的学术论文写作指导专家。基于提供的文档分析和知识库信息，设计一个完整、专业的论文大纲。\\n\\n设计原则：\\n1. 遵循学术写作规范和标准结构\\n2. 确保逻辑清晰、层次分明\\n3. 每个章节都有明确的目标和内容要求\\n4. 考虑论证的完整性和说服力\\n5. 适应具体学科领域的特点\\n\\n输出格式为JSON：\\n{\\n  \\\"outlineStructure\\\": {\\n    \\\"title\\\": \\\"论文标题\\\",\\n    \\\"abstract\\\": \\\"摘要内容要求\\\",\\n    \\\"keywords\\\": [\\\"关键词1\\\", \\\"关键词2\\\"],\\n    \\\"chapters\\\": [\\n      {\\n        \\\"chapterNumber\\\": 1,\\n        \\\"title\\\": \\\"章节标题\\\",\\n        \\\"objective\\\": \\\"本章目标\\\",\\n        \\\"mainPoints\\\": [\\\"要点1\\\", \\\"要点2\\\"],\\n        \\\"sections\\\": [\\n          {\\n            \\\"sectionNumber\\\": \\\"1.1\\\",\\n            \\\"title\\\": \\\"小节标题\\\",\\n            \\\"content\\\": \\\"具体内容要求\\\",\\n            \\\"wordCount\\\": 估计字数\\n          }\\n        ],\\n        \\\"expectedWordCount\\\": 预期字数\\n      }\\n    ],\\n    \\\"references\\\": \\\"参考文献要求\\\",\\n    \\\"totalWordCount\\\": 总预期字数\\n  },\\n  \\\"writingGuidelines\\\": {\\n    \\\"style\\\": \\\"写作风格要求\\\",\\n    \\\"tone\\\": \\\"语调要求\\\",\\n    \\\"academicLevel\\\": \\\"学术水平\\\",\\n    \\\"citationStyle\\\": \\\"引用格式\\\"\\n  },\\n  \\\"qualityRequirements\\\": [\\\"质量要求1\\\", \\\"质量要求2\\\"]\\n}\"}, {\"role\": \"user\", \"content\": \"请基于以下信息设计论文大纲：\\n\\n## 文档分析结果\\n**主题：** {{ $('构建知识库搜索查询').item.json.originalAnalysis.theme }}\\n**摘要：** {{ $('构建知识库搜索查询').item.json.originalAnalysis.summary }}\\n\\n**关键要点：**\\n{{ $('构建知识库搜索查询').item.json.originalAnalysis.keyPoints.map((point, index) => `${index + 1}. ${point}`).join('\\n') }}\\n\\n**核心概念：** {{ $('构建知识库搜索查询').item.json.originalAnalysis.concepts.join(', ') }}\\n\\n## 知识库检索结果\\n{{ $json.results ? $json.results.slice(0, 5).map((result, index) => `${index + 1}. ${result.title || result.content.substring(0, 100)}... (相关度: ${result.score})`).join('\\n') : '无相关知识库信息' }}\\n\\n请设计一个完整的论文大纲。\"}]"
            },
            {
              "name": "temperature",
              "value": "0.3"
            },
            {
              "name": "max_tokens",
              "value": "3000"
            }
          ]
        }
      },
      "id": "t6u7v8w9-x0y1-2345-f012-678901234567",
      "name": "LLM大纲生成（有知识库）",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 80]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.llmApiUrl }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "{{ $('环境配置').item.json.llmModel }}"
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"你是一个专业的学术论文写作指导专家。基于提供的文档分析，设计一个完整、专业的论文大纲。\\n\\n设计原则：\\n1. 遵循学术写作规范和标准结构\\n2. 确保逻辑清晰、层次分明\\n3. 每个章节都有明确的目标和内容要求\\n4. 考虑论证的完整性和说服力\\n5. 适应具体学科领域的特点\\n\\n标准学术论文结构参考：\\n- 摘要 (Abstract)\\n- 引言/绪论 (Introduction)\\n- 文献综述 (Literature Review)\\n- 研究方法 (Methodology)\\n- 结果与分析 (Results and Analysis)\\n- 讨论 (Discussion)\\n- 结论 (Conclusion)\\n- 参考文献 (References)\\n\\n输出格式为JSON（与有知识库版本相同的格式）。\"}, {\"role\": \"user\", \"content\": \"请基于以下文档分析设计论文大纲：\\n\\n**主题：** {{ $('构建知识库搜索查询').item.json.originalAnalysis.theme }}\\n**摘要：** {{ $('构建知识库搜索查询').item.json.originalAnalysis.summary }}\\n\\n**关键要点：**\\n{{ $('构建知识库搜索查询').item.json.originalAnalysis.keyPoints.map((point, index) => `${index + 1}. ${point}`).join('\\n') }}\\n\\n**核心概念：** {{ $('构建知识库搜索查询').item.json.originalAnalysis.concepts.join(', ') }}\\n\\n请设计一个完整的论文大纲。\"}]"
            },
            {
              "name": "temperature",
              "value": "0.3"
            },
            {
              "name": "max_tokens",
              "value": "3000"
            }
          ]
        }
      },
      "id": "u7v8w9x0-y1z2-3456-0123-789012345678",
      "name": "LLM大纲生成（无知识库）",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 200]
    },
    {
      "parameters": {},
      "id": "v8w9x0y1-z2a3-4567-1234-890123456789",
      "name": "大纲结果合并",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1100, 140]
    },
    {
      "parameters": {
        "functionCode": "// 处理大纲生成结果并进行质量检查\nfor (const item of $input.all()) {\n  try {\n    const llmResponse = JSON.parse(item.json.choices[0].message.content);\n    const originalAnalysis = $('构建知识库搜索查询').first().json.originalAnalysis;\n    \n    // 质量检查\n    const qualityChecks = {\n      hasTitle: !!llmResponse.outlineStructure.title,\n      hasAbstract: !!llmResponse.outlineStructure.abstract,\n      hasKeywords: llmResponse.outlineStructure.keywords && llmResponse.outlineStructure.keywords.length > 0,\n      hasChapters: llmResponse.outlineStructure.chapters && llmResponse.outlineStructure.chapters.length >= 3,\n      hasReferences: !!llmResponse.outlineStructure.references,\n      chaptersHaveObjectives: llmResponse.outlineStructure.chapters ? \n        llmResponse.outlineStructure.chapters.every(ch => ch.objective) : false,\n      sectionsHaveContent: llmResponse.outlineStructure.chapters ? \n        llmResponse.outlineStructure.chapters.every(ch => \n          ch.sections && ch.sections.every(sec => sec.content)\n        ) : false\n    };\n    \n    const qualityScore = Object.values(qualityChecks).filter(Boolean).length / Object.values(qualityChecks).length;\n    \n    // 生成写作任务分解\n    const writingTasks = [];\n    \n    if (llmResponse.outlineStructure.chapters) {\n      llmResponse.outlineStructure.chapters.forEach((chapter, chapterIndex) => {\n        if (chapter.sections) {\n          chapter.sections.forEach((section, sectionIndex) => {\n            writingTasks.push({\n              taskId: `task-${chapterIndex + 1}-${sectionIndex + 1}`,\n              type: 'section_writing',\n              chapter: chapter.chapterNumber,\n              section: section.sectionNumber,\n              title: section.title,\n              requirements: {\n                content: section.content,\n                wordCount: section.wordCount || 500,\n                objective: chapter.objective,\n                context: chapter.mainPoints\n              },\n              dependencies: sectionIndex > 0 ? [`task-${chapterIndex + 1}-${sectionIndex}`] : [],\n              priority: chapter.chapterNumber <= 2 ? 'high' : 'medium',\n              status: 'pending'\n            });\n          });\n        }\n      });\n    }\n    \n    // 构建完整结果\n    const outlineResult = {\n      // 基础信息\n      generatedAt: new Date().toISOString(),\n      originalDocument: originalAnalysis.title,\n      sourceTheme: originalAnalysis.theme,\n      \n      // 大纲结构\n      outline: llmResponse.outlineStructure,\n      \n      // 写作指导\n      guidelines: llmResponse.writingGuidelines,\n      qualityRequirements: llmResponse.qualityRequirements,\n      \n      // 质量评估\n      qualityCheck: {\n        score: qualityScore,\n        details: qualityChecks,\n        status: qualityScore >= 0.8 ? 'excellent' : qualityScore >= 0.6 ? 'good' : 'needs_review'\n      },\n      \n      // 写作任务分解\n      writingTasks: writingTasks,\n      \n      // 处理状态\n      processingStage: 'outline_completed',\n      nextStage: 'writing_tasks_assignment'\n    };\n    \n    item.json = outlineResult;\n    \n  } catch (error) {\n    item.json = {\n      error: '大纲生成结果处理失败',\n      errorMessage: error.message,\n      originalResponse: item.json,\n      processingStage: 'outline_generation_failed'\n    };\n  }\n}\n\nreturn $input.all();"
      },
      "id": "w9x0y1z2-a3b4-5678-2345-901234567890",
      "name": "大纲结果处理",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 140]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.qualityCheck && $json.qualityCheck.status === 'needs_review' }}",
            "operation": "equal",
            "rightValue": "true"
          }
        }
      },
      "id": "x0y1z2a3-b4c5-6789-3456-012345678901",
      "name": "质量检查",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1500, 140]
    },
    {
      "parameters": {
        "functionCode": "// 生成易读的大纲Markdown文件\nfor (const item of $input.all()) {\n  const data = item.json;\n  const outline = data.outline;\n  \n  let markdownContent = `# ${outline.title}\\n\\n`;\n  markdownContent += `**生成时间：** ${data.generatedAt}\\n`;\n  markdownContent += `**原始文档：** ${data.originalDocument}\\n`;\n  markdownContent += `**质量评分：** ${(data.qualityCheck.score * 100).toFixed(1)}% (${data.qualityCheck.status})\\n\\n`;\n  \n  markdownContent += `## 📝 摘要要求\\n\\n${outline.abstract}\\n\\n`;\n  \n  markdownContent += `## 🏷️ 关键词\\n\\n${outline.keywords.join(', ')}\\n\\n`;\n  \n  markdownContent += `## 📋 论文结构\\n\\n`;\n  \n  // 生成章节大纲\n  if (outline.chapters) {\n    outline.chapters.forEach(chapter => {\n      markdownContent += `### 第${chapter.chapterNumber}章 ${chapter.title}\\n\\n`;\n      markdownContent += `**本章目标：** ${chapter.objective}\\n\\n`;\n      \n      if (chapter.mainPoints && chapter.mainPoints.length > 0) {\n        markdownContent += `**主要内容：**\\n`;\n        chapter.mainPoints.forEach((point, index) => {\n          markdownContent += `${index + 1}. ${point}\\n`;\n        });\n        markdownContent += `\\n`;\n      }\n      \n      if (chapter.sections) {\n        markdownContent += `**章节安排：**\\n\\n`;\n        chapter.sections.forEach(section => {\n          markdownContent += `#### ${section.sectionNumber} ${section.title}\\n\\n`;\n          markdownContent += `${section.content}\\n\\n`;\n          markdownContent += `*预期字数：${section.wordCount || '待定'}字*\\n\\n`;\n        });\n      }\n      \n      markdownContent += `**本章预期字数：** ${chapter.expectedWordCount || '待计算'}字\\n\\n`;\n      markdownContent += `---\\n\\n`;\n    });\n  }\n  \n  markdownContent += `## 📚 参考文献要求\\n\\n${outline.references}\\n\\n`;\n  \n  markdownContent += `## ✍️ 写作指导\\n\\n`;\n  if (data.guidelines) {\n    markdownContent += `**写作风格：** ${data.guidelines.style}\\n`;\n    markdownContent += `**语调要求：** ${data.guidelines.tone}\\n`;\n    markdownContent += `**学术水平：** ${data.guidelines.academicLevel}\\n`;\n    markdownContent += `**引用格式：** ${data.guidelines.citationStyle}\\n\\n`;\n  }\n  \n  if (data.qualityRequirements && data.qualityRequirements.length > 0) {\n    markdownContent += `## 🎯 质量要求\\n\\n`;\n    data.qualityRequirements.forEach((req, index) => {\n      markdownContent += `${index + 1}. ${req}\\n`;\n    });\n    markdownContent += `\\n`;\n  }\n  \n  markdownContent += `## 📊 写作统计\\n\\n`;\n  markdownContent += `- **总预期字数：** ${outline.totalWordCount || '待计算'}字\\n`;\n  markdownContent += `- **章节数量：** ${outline.chapters ? outline.chapters.length : 0}章\\n`;\n  markdownContent += `- **写作任务数：** ${data.writingTasks.length}个\\n`;\n  markdownContent += `- **质量评分：** ${(data.qualityCheck.score * 100).toFixed(1)}%\\n\\n`;\n  \n  markdownContent += `---\\n\\n`;\n  markdownContent += `*本大纲由AI助手自动生成，建议人工审核确认后开始写作*\\n`;\n  \n  // 生成文件名\n  const timestamp = new Date().toISOString().slice(0, 19).replace(/[T:]/g, '-');\n  const fileName = `paper-outline-${timestamp}.md`;\n  \n  item.json.outlineMarkdown = markdownContent;\n  item.json.outlineFileName = fileName;\n  item.binary = {\n    data: Buffer.from(markdownContent).toString('base64'),\n    fileName: fileName,\n    mimeType: 'text/markdown'\n  };\n}\n\nreturn $input.all();"
      },
      "id": "y1z2a3b4-c5d6-7890-4567-123456789012",
      "name": "生成大纲Markdown",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 100]
    },
    {
      "parameters": {
        "url": "{{ $('环境配置').item.json.writingWorkflowUrl }}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "outlineData",
              "value": "={{ $json }}"
            }
          ]
        }
      },
      "id": "z2a3b4c5-d6e7-8901-5678-234567890123",
      "name": "触发写作任务工作流",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1900, 100]
    },
    {
      "parameters": {
        "message": "⚠️ 大纲质量需要人工审核\\n\\n**质量评分：** {{ ($json.qualityCheck.score * 100).toFixed(1) }}%\\n**问题详情：** {{ Object.entries($json.qualityCheck.details).filter(([key, value]) => !value).map(([key]) => key).join(', ') }}\\n\\n请审核大纲内容后手动触发下一步骤。",
        "additionalFields": {
          "title": "大纲需要审核"
        }
      },
      "id": "a3b4c5d6-e7f8-9012-6789-345678901234",
      "name": "人工审核通知",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [1500, 300]
    },
    {
      "parameters": {
        "message": "✅ 论文大纲生成完成\\n\\n**论文标题：** {{ $json.outline.title }}\\n**章节数量：** {{ $json.outline.chapters.length }}章\\n**写作任务：** {{ $json.writingTasks.length }}个\\n**质量评分：** {{ ($json.qualityCheck.score * 100).toFixed(1) }}%\\n\\n下一步：开始分任务写作",
        "additionalFields": {
          "title": "大纲生成成功"
        }
      },
      "id": "b4c5d6e7-f8g9-0123-7890-456789012345",
      "name": "成功通知",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2100, 100]
    }
  ],
  "connections": {
    "大纲生成触发器": {
      "main": [
        [
          {
            "node": "构建知识库搜索查询",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "构建知识库搜索查询": {
      "main": [
        [
          {
            "node": "知识库检索",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "知识库检索": {
      "main": [
        [
          {
            "node": "检查知识库结果",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "检查知识库结果": {
      "main": [
        [
          {
            "node": "LLM大纲生成（有知识库）",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "LLM大纲生成（无知识库）",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM大纲生成（有知识库）": {
      "main": [
        [
          {
            "node": "大纲结果合并",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM大纲生成（无知识库）": {
      "main": [
        [
          {
            "node": "大纲结果合并",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "大纲结果合并": {
      "main": [
        [
          {
            "node": "大纲结果处理",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "大纲结果处理": {
      "main": [
        [
          {
            "node": "质量检查",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "质量检查": {
      "main": [
        [
          {
            "node": "生成大纲Markdown",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "人工审核通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "生成大纲Markdown": {
      "main": [
        [
          {
            "node": "触发写作任务工作流",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "触发写作任务工作流": {
      "main": [
        [
          {
            "node": "成功通知",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "outline-workflow-v1.0",
  "meta": {
    "description": "论文大纲生成工作流：基于文档分析结果，结合知识库检索，生成结构化的论文大纲，包含写作指导和任务分解。支持质量检查和人工审核机制。",
    "category": "ai-integration",
    "tags": ["论文大纲", "知识库检索", "结构设计", "写作指导", "任务分解"]
  }
}